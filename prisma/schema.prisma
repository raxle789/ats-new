generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("DATABASE_SHADOW_URL")
}

model addresses {
  id              Int        @id @default(autoincrement())
  city            String     @db.NVarChar(510)
  country         String     @db.NVarChar(510)
  candidate_id    Int
  created_at      DateTime?  @default(now()) @db.DateTime
  is_current      String     @db.NVarChar(510)
  rt              String     @db.NVarChar(510)
  rw              String     @db.NVarChar(510)
  street          String     @db.NVarChar(510)
  subdistrict     String     @db.NVarChar(510)
  updated_at      DateTime?  @db.DateTime
  village         String     @db.NVarChar(510)
  zip_code        String     @db.NVarChar(510)
  current_address String?    @db.Text
  candidates      candidates @relation(fields: [candidate_id], references: [id])
}

model banks {
  id                  Int          @id(map: "PK_3975b5f684ec241e3901db62d77") @default(autoincrement())
  bank_name           String       @db.NVarChar(64)
  bank_branch         String       @db.NVarChar(64)
  bank_account_number Int          @unique(map: "UQ_d99ff7685a1d8bc7f203451f196")
  candidates          candidates[]
}

model candidates {
  id                   Int                   @id(map: "PK_140681296bf033ab1eb95288abb") @default(autoincrement())
  gender               String?               @db.NVarChar(32)
  religion             String?               @db.NVarChar(128)
  ethnicity            String?               @db.NVarChar(64)
  blood_type           String?               @db.Char(1)
  phone_number         String                @unique(map: "UQ_e9aae9c8df7ce4bc2e356b57219") @db.NVarChar(14)
  current_salary       Int?
  source_referer       String?               @db.NVarChar(128)
  is_blacklisted       Boolean?              @default(false, map: "DF_49d807863236b10b9c236d5b5d8")
  created_at           DateTime              @default(now(), map: "DF_5638150fbb378cd6859db255f7b") @db.DateTime
  updated_at           DateTime?             @default(now(), map: "DF_ed9c7e1157bf98c5b2b80b1fd73") @db.DateTime
  userId               Int?
  bankId               Int?
  emengencyContactId   Int?
  linkedin_profile_url String?               @db.NVarChar(512)
  identityInfoId       Int?
  date_of_birth        DateTime?             @db.Date
  marital_status       String?               @db.NVarChar(256)
  birthCity            String?               @db.NVarChar(510)
  domicile             String?               @db.NVarChar(510)
  addresses            addresses[]
  candidate_questions  CandidateQuestions[]
  candidate_skills     candidate_skills[]
  CandidateStates      CandidateStates[]
  emergency_contacts   emergency_contacts?   @relation(fields: [emengencyContactId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_02cb34982ecd17fda09c240254e")
  users                Users?                @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_10d0384a816526f8c7f6b1e67b3")
  banks                banks?                @relation(fields: [bankId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_4942769253874bef2bc42d1858d")
  identity_info        identity_info?        @relation(fields: [identityInfoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_bbd440878ce26abdc91d67a0af8")
  certifications       certifications[]
  documents            documents[]
  educations           educations[]
  families             families[]
  languages            languages[]
  sims                 sims[]
  working_experiences  working_experiences[]
}

model candidates_diseases {
  id             Int      @id(map: "PK_98de0fe4d1c3d848b42d6fc5eab") @default(autoincrement())
  disease_name   String   @db.NVarChar(126)
  diagnosis_date DateTime @db.Date
}

model certifications {
  id               Int          @id @default(autoincrement())
  created_at       DateTime?    @default(now(), map: "DF_b4df756126a0a63ec5d1dcbb79c") @db.DateTime
  updated_at       DateTime?    @db.DateTime
  candidate_id     Int
  certificate_id   Int
  institution_name String       @db.NVarChar(510)
  issued_date      DateTime     @db.Date
  candidates       candidates   @relation(fields: [candidate_id], references: [id])
  certificates     Certificates @relation(fields: [certificate_id], references: [id])
}

model document_types {
  id            Int         @id(map: "PK_d467d7eeb7c8ce216e90e8494aa") @default(autoincrement())
  document_name String      @db.NVarChar(128)
  documents     documents[]
}

model documents {
  id                                                Int             @id(map: "PK_ac51aa5181ee2036f5ca482857c") @default(autoincrement())
  saved_name                                        String          @db.NVarChar(128)
  original_name                                     String          @db.NVarChar(128)
  byte_size                                         Int
  path                                              String          @db.NVarChar(255)
  file_base                                         Bytes           @db.Image
  created_at                                        DateTime        @default(now(), map: "DF_0ac6db0be1ba323e80e653b0e6d") @db.DateTime
  updated_at                                        DateTime        @default(now(), map: "DF_0fa0f20571d78848ea6e36f75b5") @db.DateTime
  documentTypeId                                    Int?
  candidate_id                                      Int?
  candidate                                         candidates?     @relation(fields: [candidate_id], references: [id])
  document_types                                    document_types? @relation(fields: [documentTypeId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_6c6b9775baa0c8973bd829a8e46")
  identity_info_identity_info_ktpPhotoIdTodocuments identity_info[] @relation("identity_info_ktpPhotoIdTodocuments")
  identity_info_identity_info_avatarIdTodocuments   identity_info[] @relation("identity_info_avatarIdTodocuments")
  sims                                              sims[]
}

model educations {
  id              Int        @id(map: "PK_09d2f29e7f6f31f5c01d79d2dbf") @default(autoincrement())
  start_year      Int        @db.SmallInt
  end_year        Int        @db.SmallInt
  university_name String     @db.NVarChar(256)
  major           String     @db.NVarChar(128)
  gpa             Float
  is_latest       Boolean
  is_graduate     Boolean
  created_at      DateTime   @default(now(), map: "DF_9476acc97bf108991353a9af4b0") @db.DateTime
  updated_at      DateTime?  @default(now(), map: "DF_11046a6c8f5e17e459700cc9a13") @db.DateTime
  candidateId     Int
  level           String     @db.NVarChar(32)
  city_of_school  String     @db.NVarChar(510)
  candidates      candidates @relation(fields: [candidateId], references: [id], onUpdate: NoAction, map: "FK_da1ce5966e5d5a43a9e0797e0c0")
}

model EfpkTa {
  id            Int    @id @default(autoincrement())
  taId          Int    @map("ta_id")
  efpkRequestNo String @unique @map("efpk_request_no") @db.NVarChar(255)
  ta            Users  @relation(fields: [taId], references: [id])

  @@map("efpk_ta")
}

model EfpkTaTransactions {
  id            Int      @id @default(autoincrement())
  taId          Int      @map("ta_id")
  assignedAt    DateTime @default(now()) @map("assigned_at") @db.DateTime
  efpkRequestNo String   @map("efpk_request_no") @db.NVarChar(255)
  ta            Users    @relation(fields: [taId], references: [id])

  @@map("efpk_ta_transactions")
}

model EfpkJobVacancies {
  jobVacancyId  Int          @map("job_vacancy_id")
  efpkRequestNo String       @map("efpk_request_no") @db.NVarChar(255)
  job_vacancies JobVacancies @relation(fields: [jobVacancyId], references: [id])

  @@id([efpkRequestNo, jobVacancyId])
  @@map("efpk_job_vacancies")
}

model emergency_contacts {
  id              Int          @id @default(autoincrement())
  phone_number    String       @db.NVarChar(510)
  name            String       @db.NVarChar(510)
  relation_status String       @db.NVarChar(510)
  candidates      candidates[]
}

model identity_info {
  id                                            Int          @id(map: "PK_1b708b2de550b69816a56e68f11") @default(autoincrement())
  ktp_number                                    String       @db.NVarChar(16)
  kk_number                                     String       @db.NVarChar(16)
  passport_number                               String       @db.NVarChar(32)
  npwp_number                                   String?      @db.NVarChar(9)
  avatarId                                      Int?
  ktpPhotoId                                    Int?
  candidates                                    candidates[]
  documents_identity_info_ktpPhotoIdTodocuments documents?   @relation("identity_info_ktpPhotoIdTodocuments", fields: [ktpPhotoId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_3c87e74de6f99d1c06cf4581fbb")
  documents_identity_info_avatarIdTodocuments   documents?   @relation("identity_info_avatarIdTodocuments", fields: [avatarId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_ff510b911992a2917ebdd7fb88a")
}

model Roles {
  id        Int         @id @default(autoincrement())
  name      String      @db.NVarChar(255)
  guard     String      @db.NVarChar(255)
  createdAt DateTime?   @default(now()) @map("created_at") @db.DateTime
  updatedAt DateTime?   @updatedAt @map("updated_at") @db.DateTime
  userRoles UserRoles[]

  @@map("roles")
}

model UserRoles {
  roleId Int   @map("role_id")
  userId Int   @map("user_id")
  roles  Roles @relation(fields: [roleId], references: [id])
  users  Users @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
  @@map("user_has_roles")
}

model sims {
  id           Int         @id(map: "PK_65e3dc2c5d993ede14fdf9df1ea") @default(autoincrement())
  sim_type     String      @db.NVarChar(64)
  sim_number   String      @db.NVarChar(128)
  simPhotoIdId Int?
  candidateId  Int?
  candidates   candidates? @relation(fields: [candidateId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_c07d287b265501fffa4b4559984")
  documents    documents?  @relation(fields: [simPhotoIdId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_e18f71ccc446f3c09584647d100")
}

model skill_types {
  id         Int    @id(map: "PK_f98a760e950fc2f7376178e0689") @default(autoincrement())
  skill_name String @db.NVarChar(126)
}

model Users {
  id                 Int                  @id(map: "PK_a3ffb1c0c8416b9fc6f907b7433") @default(autoincrement())
  name               String               @db.NVarChar(256)
  email              String               @unique(map: "UQ_97672ac88f789774dd47f7c8be3") @db.NVarChar(128)
  is_email_verified  Boolean?
  password           String               @db.NVarChar(512)
  created_at         DateTime?            @default(now(), map: "DF_c9b5b525a96ddc2c5647d7f7fa5") @db.DateTime
  updated_at         DateTime?            @default(now(), map: "DF_6d596d799f9cb9dac6f7bf7c23c") @db.DateTime
  candidates         candidates[]
  efpkTa             EfpkTa[]
  efpkTaTransactions EfpkTaTransactions[]
  job_vacancies      JobVacancies[]
  job_vacancy_ta     job_vacancy_ta[]
  job_vacancy_users  job_vacancy_users[]
  userRoles          UserRoles[]

  @@map("users")
}

model working_experiences {
  id              Int        @id(map: "PK_7ef8ca191515c6b51c75d5390d0") @default(autoincrement())
  company_name    String     @db.NVarChar(256)
  line_industry   String     @db.NVarChar(128)
  job_title       String     @db.NVarChar(128)
  job_level       String?    @db.NVarChar(64)
  job_function    String     @db.NVarChar(256)
  job_description String     @db.NVarChar(512)
  salary          Int
  start_at        DateTime   @db.Date
  end_at          DateTime   @db.Date
  is_currently    Boolean
  created_at      DateTime   @default(now(), map: "DF_6aad921dfbb2e334f6a9fdd823b") @db.DateTime
  updated_at      DateTime?  @default(now(), map: "DF_54053863149a7090457b86a587c") @db.DateTime
  candidateId     Int
  candidates      candidates @relation(fields: [candidateId], references: [id], onUpdate: NoAction, map: "FK_fdb1fb1f815620c2f82557fdc39")
}

model LineIndustries {
  id                          Int                           @id @default(autoincrement())
  name                        String                        @db.NVarChar(510)
  createdAt                   DateTime?                     @default(now()) @map("created_at") @db.DateTime
  updatedAt                   DateTime?                     @updatedAt @map("updated_at") @db.DateTime
  job_vacancy_line_industries job_vacancy_line_industries[]

  @@map("line_industries")
}

model EducationLevels {
  id        Int       @id @default(autoincrement())
  name      String    @db.NVarChar(510)
  prointId  Int?      @map("proint_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime
  updatedAt DateTime? @updatedAt @map("updated_at") @db.DateTime

  @@map("education_levels")
}

model RequirementFields {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @unique @db.NVarChar(510)
  createdAt                 DateTime?                   @default(now()) @map("created_at") @db.DateTime
  updatedAt                 DateTime?                   @updatedAt @map("updated_at") @db.DateTime
  requirementFieldParserId  Int?                        @map("requirement_field_parser_id")
  job_vacancy_requirements  job_vacancy_requirements[]
  positionLevelRequirements PositionLevelRequirements[]
  requirementFieldParsers   RequirementFieldParsers?    @relation(fields: [requirementFieldParserId], references: [id])

  @@map("requirement_fields")
}

model RequirementFieldParsers {
  id                Int                 @id @default(autoincrement())
  name              String              @unique @db.NVarChar(510)
  createdAt         DateTime?           @default(now()) @map("created_at") @db.DateTime
  updatedAt         DateTime?           @updatedAt @map("updated_at") @db.DateTime
  requirementFields RequirementFields[]

  @@map("requirement_field_parsers")
}

model PositionLevelRequirements {
  value              String?           @db.Text
  positionLevelId    Int               @map("position_level_id")
  requirementFieldId Int               @map("requirement_field_id")
  positionLevels     PositionLevels    @relation(fields: [positionLevelId], references: [id])
  requirementFields  RequirementFields @relation(fields: [requirementFieldId], references: [id])

  @@id([positionLevelId, requirementFieldId])
  @@map("position_level_requirements")
}

model PositionLevels {
  id                        Int                         @id @default(autoincrement())
  name                      String                      @db.NVarChar(510)
  level                     Int                         @unique
  score                     Int
  slaDays                   Int?                        @map("sla_days")
  createdAt                 DateTime?                   @default(now()) @map("created_at") @db.DateTime
  updatedAt                 DateTime?                   @updatedAt @map("updated_at") @db.DateTime
  prointId                  Int?                        @map("proint_id")
  job_vacancies             JobVacancies[]
  positionLevelRequirements PositionLevelRequirements[]

  @@map("position_levels")
}

model JobTitles {
  id        Int       @id @default(autoincrement())
  name      String    @db.NVarChar(510)
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime
  updatedAt DateTime? @updatedAt @map("updated_at") @db.DateTime

  @@map("job_titles")
}

model JobFunctions {
  id            Int            @id @default(autoincrement())
  name          String         @db.NVarChar(510)
  createdAt     DateTime?      @default(now()) @map("created_at") @db.DateTime
  updatedAt     DateTime?      @updatedAt @map("updated_at") @db.DateTime
  job_vacancies JobVacancies[]

  @@map("job_functions")
}

model EmploymentStatus {
  id            Int            @id @default(autoincrement())
  name          String         @unique @db.NVarChar(510)
  prointId      Int?           @map("proint_id")
  createdAt     DateTime?      @default(now()) @map("created_at") @db.DateTime
  updatedAt     DateTime?      @updatedAt @map("updated_at") @db.DateTime
  job_vacancies JobVacancies[]

  @@map("employment_status")
}

model JobVacancies {
  id                          Int                           @id @default(autoincrement())
  jobDescription              String?                       @map("job_description") @db.Text
  jobRequirement              String?                       @map("job_requirement") @db.Text
  isVideoInterview            String?                       @map("is_video_interview") @db.NVarChar(10)
  isAutoAssessment            String?                       @map("is_auto_assessment") @db.NVarChar(10)
  isConfidential              String?                       @map("is_confidential") @db.NVarChar(10)
  isCareerFest                String?                       @map("is_career_fest") @db.NVarChar(10)
  createdAt                   DateTime?                     @default(now()) @map("created_at") @db.DateTime
  updatedAt                   DateTime?                     @updatedAt @map("updated_at") @db.DateTime
  taId                        Int?                          @map("ta_id")
  jobFunctionId               Int?                          @map("job_function_id")
  expired_date                DateTime?                     @db.DateTime
  job_title_aliases           String?                       @db.NVarChar(510)
  job_title_code              String?                       @db.NVarChar(255)
  location_code               String?                       @db.NVarChar(255)
  location_group_code         String?                       @db.NVarChar(255)
  organization_group_code     String?                       @db.NVarChar(255)
  published_date              DateTime?                     @db.DateTime
  work_location_address       String?                       @db.Text
  employment_status_name      String?                       @db.NVarChar(510)
  vertical_code               String?                       @db.NVarChar(255)
  position_level              Int?
  CandidateStates             CandidateStates[]
  efpk_job_vacancies          EfpkJobVacancies[]
  employment_status           EmploymentStatus?             @relation(fields: [employment_status_name], references: [name])
  job_functions               JobFunctions?                 @relation(fields: [jobFunctionId], references: [id])
  position_levels             PositionLevels?               @relation(fields: [position_level], references: [level])
  users                       Users?                        @relation(fields: [taId], references: [id])
  verticals                   verticals?                    @relation(fields: [vertical_code], references: [code])
  job_vacancy_line_industries job_vacancy_line_industries[]
  job_vacancy_requirements    job_vacancy_requirements[]
  job_vacancy_ta              job_vacancy_ta[]
  job_vacancy_users           job_vacancy_users[]

  @@map("job_vacancies")
}

model Questions {
  id                 Int                  @id @default(autoincrement())
  question           String               @db.Text
  createdAt          DateTime?            @default(now()) @map("created_at") @db.DateTime
  updatedAt          DateTime?            @map("updated_at") @db.DateTime
  candidateQuestions CandidateQuestions[]

  @@map("questions")
}

model CandidateQuestions {
  candidateId Int        @map("candidate_id")
  questionId  Int        @map("question_id")
  answer      String     @db.Text
  created_at  DateTime?  @default(now()) @db.DateTime
  updated_at  DateTime?  @db.DateTime
  candidates  candidates @relation(fields: [candidateId], references: [id])
  questions   Questions  @relation(fields: [questionId], references: [id])

  @@id([candidateId, questionId])
  @@map("candidate_questions")
}

model States {
  id              Int               @id @default(autoincrement())
  name            String            @db.NVarChar(255)
  createdAt       DateTime?         @default(now()) @map("created_at") @db.DateTime
  updatedAt       DateTime?         @updatedAt @map("updated_at") @db.DateTime
  candidateStates CandidateStates[]

  @@map("states")
}

model CandidateStates {
  candidateId  Int          @map("candidate_id")
  jobVacancyId Int          @map("job_vacancy_id")
  stateId      Int          @map("state_id")
  assignedAt   DateTime     @default(now()) @map("assigned_at") @db.DateTime
  candidates   candidates   @relation(fields: [candidateId], references: [id])
  jobVacancies JobVacancies @relation(fields: [jobVacancyId], references: [id])
  states       States       @relation(fields: [stateId], references: [id])

  @@id([candidateId, jobVacancyId, stateId])
  @@map("candidate_states")
}

model Genders {
  id        Int       @id @default(autoincrement())
  name      String    @db.NVarChar(255)
  createdAt DateTime? @default(now()) @map("created_at") @db.DateTime
  updatedAt DateTime? @updatedAt @map("updated_at") @db.DateTime

  @@map("genders")
}

model Skills {
  id               Int                @id @default(autoincrement())
  name             String             @db.NVarChar(510)
  createdAt        DateTime?          @default(now()) @map("created_at") @db.DateTime
  updatedAt        DateTime?          @updatedAt @map("updated_at") @db.DateTime
  candidate_skills candidate_skills[]

  @@map("skills")
}

model Certificates {
  id             Int              @id @default(autoincrement())
  name           String           @db.NVarChar(510)
  createdAt      DateTime?        @default(now()) @map("created_at") @db.DateTime
  updatedAt      DateTime?        @updatedAt @map("updated_at") @db.DateTime
  certifications certifications[]

  @@map("certificates")
}

model verticals {
  id            Int            @id @default(autoincrement())
  code          String         @unique @db.NVarChar(255)
  name          String?        @db.NVarChar(510)
  created_at    DateTime?      @default(now()) @db.DateTime
  updated_at    DateTime?      @db.DateTime
  job_vacancies JobVacancies[]
}

model candidate_skills {
  candidate_id Int
  skill_id     Int
  candidates   candidates @relation(fields: [candidate_id], references: [id])
  skills       Skills     @relation(fields: [skill_id], references: [id])

  @@id([candidate_id, skill_id])
}

model families {
  id             Int        @id @default(autoincrement())
  name           String     @db.NVarChar(510)
  date_of_birth  DateTime   @db.Date
  relationStatus String     @db.NVarChar(510)
  candidate_id   Int
  created_at     DateTime?  @default(now()) @db.DateTime
  updated_at     DateTime?  @db.DateTime
  gender         String     @db.NVarChar(255)
  candidates     candidates @relation(fields: [candidate_id], references: [id])
}

model job_vacancy_line_industries {
  job_vacancy_id   Int
  line_industry_id Int
  job_vacancies    JobVacancies   @relation(fields: [job_vacancy_id], references: [id])
  line_industries  LineIndustries @relation(fields: [line_industry_id], references: [id])

  @@id([job_vacancy_id, line_industry_id])
}

model job_vacancy_requirements {
  job_vacancy_id       Int
  requirement_field_id Int
  value                String?           @db.Text
  job_vacancies        JobVacancies      @relation(fields: [job_vacancy_id], references: [id])
  requirement_fields   RequirementFields @relation(fields: [requirement_field_id], references: [id])

  @@id([job_vacancy_id, requirement_field_id])
}

model job_vacancy_ta {
  job_vacancy_id Int
  ta_id          Int
  job_vacancies  JobVacancies @relation(fields: [job_vacancy_id], references: [id])
  users          Users        @relation(fields: [ta_id], references: [id], onUpdate: NoAction)

  @@id([job_vacancy_id, ta_id])
}

model job_vacancy_users {
  job_vacancy_id Int
  user_id        Int
  job_vacancies  JobVacancies @relation(fields: [job_vacancy_id], references: [id])
  users          Users        @relation(fields: [user_id], references: [id], onUpdate: NoAction)

  @@id([job_vacancy_id, user_id])
}

model languages {
  id           Int        @id @default(autoincrement())
  name         String     @db.NVarChar(510)
  created_at   DateTime?  @default(now()) @db.DateTime
  updated_at   DateTime?  @db.DateTime
  candidate_id Int
  level        String     @db.NVarChar(510)
  candidates   candidates @relation(fields: [candidate_id], references: [id])
}

model proficiencies {
  id         Int       @id @default(autoincrement())
  name       String    @db.NVarChar(510)
  created_at DateTime? @default(now()) @db.DateTime
  updated_at DateTime? @db.DateTime
}
